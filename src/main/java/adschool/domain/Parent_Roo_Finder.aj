// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package adschool.domain;

import adschool.domain.Parent;
import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Parent_Roo_Finder {
    
    public static TypedQuery<Parent> Parent.findParentsByMatriculeLike(String matricule) {
        if (matricule == null || matricule.length() == 0) throw new IllegalArgumentException("The matricule argument is required");
        matricule = matricule.replace('*', '%');
        if (matricule.charAt(0) != '%') {
            matricule = "%" + matricule;
        }
        if (matricule.charAt(matricule.length() - 1) != '%') {
            matricule = matricule + "%";
        }
        EntityManager em = Parent.entityManager();
        TypedQuery<Parent> q = em.createQuery("SELECT o FROM Parent AS o WHERE LOWER(o.matricule) LIKE LOWER(:matricule)", Parent.class);
        q.setParameter("matricule", matricule);
        return q;
    }
    
    public static TypedQuery<Parent> Parent.findParentsByNomLike(String nom) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        nom = nom.replace('*', '%');
        if (nom.charAt(0) != '%') {
            nom = "%" + nom;
        }
        if (nom.charAt(nom.length() - 1) != '%') {
            nom = nom + "%";
        }
        EntityManager em = Parent.entityManager();
        TypedQuery<Parent> q = em.createQuery("SELECT o FROM Parent AS o WHERE LOWER(o.nom) LIKE LOWER(:nom)", Parent.class);
        q.setParameter("nom", nom);
        return q;
    }
    
}
