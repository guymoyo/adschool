// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package adschool.domain;

import adschool.domain.Classe;
import adschool.domain.Filiere;
import adschool.domain.Options;
import java.lang.Boolean;
import java.lang.String;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Classe_Roo_Finder {
    
    public static TypedQuery<Classe> Classe.findClassesByActif(Boolean actif) {
        if (actif == null) throw new IllegalArgumentException("The actif argument is required");
        EntityManager em = Classe.entityManager();
        TypedQuery<Classe> q = em.createQuery("SELECT o FROM Classe AS o WHERE o.actif = :actif", Classe.class);
        q.setParameter("actif", actif);
        return q;
    }
    
    public static TypedQuery<Classe> Classe.findClassesByFiliere(Filiere filiere) {
        if (filiere == null) throw new IllegalArgumentException("The filiere argument is required");
        EntityManager em = Classe.entityManager();
        TypedQuery<Classe> q = em.createQuery("SELECT o FROM Classe AS o WHERE o.filiere = :filiere", Classe.class);
        q.setParameter("filiere", filiere);
        return q;
    }
    
    public static TypedQuery<Classe> Classe.findClassesByNomClasseLike(String nomClasse) {
        if (nomClasse == null || nomClasse.length() == 0) throw new IllegalArgumentException("The nomClasse argument is required");
        nomClasse = nomClasse.replace('*', '%');
        if (nomClasse.charAt(0) != '%') {
            nomClasse = "%" + nomClasse;
        }
        if (nomClasse.charAt(nomClasse.length() - 1) != '%') {
            nomClasse = nomClasse + "%";
        }
        EntityManager em = Classe.entityManager();
        TypedQuery<Classe> q = em.createQuery("SELECT o FROM Classe AS o WHERE LOWER(o.nomClasse) LIKE LOWER(:nomClasse)", Classe.class);
        q.setParameter("nomClasse", nomClasse);
        return q;
    }
    
    public static TypedQuery<Classe> Classe.findClassesByNomClasseNotEquals(String nomClasse) {
        if (nomClasse == null || nomClasse.length() == 0) throw new IllegalArgumentException("The nomClasse argument is required");
        EntityManager em = Classe.entityManager();
        TypedQuery<Classe> q = em.createQuery("SELECT o FROM Classe AS o WHERE o.nomClasse != :nomClasse", Classe.class);
        q.setParameter("nomClasse", nomClasse);
        return q;
    }
    
    public static TypedQuery<Classe> Classe.findClassesByOptions(Options options) {
        if (options == null) throw new IllegalArgumentException("The options argument is required");
        EntityManager em = Classe.entityManager();
        TypedQuery<Classe> q = em.createQuery("SELECT o FROM Classe AS o WHERE o.options = :options", Classe.class);
        q.setParameter("options", options);
        return q;
    }
    
}
