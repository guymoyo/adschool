// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package adschool.web;

import adschool.domain.AnneeScolaire;
import adschool.domain.Classe;
import adschool.domain.ConfigInscription;
import adschool.domain.Etablissement;
import adschool.domain.Regime;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ConfigInscriptionController_Roo_Controller {
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String ConfigInscriptionController.createForm(Model uiModel) {
        uiModel.addAttribute("configInscription", new ConfigInscription());
        addDateTimeFormatPatterns(uiModel);
        return "configinscriptions/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String ConfigInscriptionController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("configinscription", ConfigInscription.findConfigInscription(id));
        uiModel.addAttribute("itemId", id);
        return "configinscriptions/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String ConfigInscriptionController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("configinscriptions", ConfigInscription.findConfigInscriptionEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) ConfigInscription.countConfigInscriptions() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("configinscriptions", ConfigInscription.findAllConfigInscriptions());
        }
        addDateTimeFormatPatterns(uiModel);
        return "configinscriptions/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String ConfigInscriptionController.update(@Valid ConfigInscription configInscription, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("configInscription", configInscription);
            addDateTimeFormatPatterns(uiModel);
            return "configinscriptions/update";
        }
        uiModel.asMap().clear();
        configInscription.merge();
        return "redirect:/configinscriptions/" + encodeUrlPathSegment(configInscription.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String ConfigInscriptionController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("configInscription", ConfigInscription.findConfigInscription(id));
        addDateTimeFormatPatterns(uiModel);
        return "configinscriptions/update";
    }
    
    @ModelAttribute("anneescolaires")
    public Collection<AnneeScolaire> ConfigInscriptionController.populateAnneeScolaires() {
        return AnneeScolaire.findAllAnneeScolaires();
    }
    
    @ModelAttribute("classes")
    public Collection<Classe> ConfigInscriptionController.populateClasses() {
        return Classe.findAllClasses();
    }
    
    @ModelAttribute("configinscriptions")
    public Collection<ConfigInscription> ConfigInscriptionController.populateConfigInscriptions() {
        return ConfigInscription.findAllConfigInscriptions();
    }
    
    @ModelAttribute("etablissements")
    public Collection<Etablissement> ConfigInscriptionController.populateEtablissements() {
        return Etablissement.findAllEtablissements();
    }
    
    @ModelAttribute("regimes")
    public Collection<Regime> ConfigInscriptionController.populateRegimes() {
        return Regime.findAllRegimes();
    }
    
    void ConfigInscriptionController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("configInscription_datelimitepaiement_date_format", "dd-MM-yyyy");
    }
    
    String ConfigInscriptionController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
